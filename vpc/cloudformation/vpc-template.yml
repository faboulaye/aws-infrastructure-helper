---
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  This template is aimed to deploy a vpc (10.0.0.0/16) with multi-az stack with access to the internet.
  By this we have Nat gateway and internet gateway. We have also a vpc endpoint in the order to leverage 
  aws private link when consuming aws services.

Parameters:
  # Ownership
  Owner:
    Type: String
    Default: Firdaws Aboulaye
  Project:
    Type: String
    Default: My first project
  Staging:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Test
      - PProd
      - Prod

  # Remote Access Network
  RemoteCidrSSHAccess:
    Description: CIDR Block for SG to Grant Access to Instances (i.e. your own ip)
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.0.0/20
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

Metadata:
  TemplateAuthor: "Firdaws Aboulaye"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Ownership
        Parameters:
          - Owner
          - Project
          - Staging

      - Label:
          default: Remote Access
        Parameters:
          - RemoteCidrSSHAccess

    ParameterLabels:
      Owner:
        default: Team or Individual Owner
      RemoteCidrSSHAccess:
        default: Network CIDR authorized to get access in SSH

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [" ", [!Ref Owner, vpc]]
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - public
              - subnet
              - az
              - !Select
                - 0
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - public
              - subnet
              - az
              - !Select
                - 1
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - public
              - subnet
              - az
              - !Select
                - 2
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  AppPrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - private
              - subnet
              - az
              - !Select
                - 0
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  AppPrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - private
              - subnet
              - az
              - !Select
                - 1
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  AppPrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - private
              - subnet
              - az
              - !Select
                - 2
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  DBPrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.7.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - private
              - subnet
              - az
              - !Select
                - 0
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  DBPrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.8.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - private
              - subnet
              - az
              - !Select
                - 1
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  DBPrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.9.0/24
      Tags:
        - Key: Name
          Value: !Join
            - " "
            - - private
              - subnet
              - az
              - !Select
                - 2
                - !GetAZs
                  Ref: AWS::Region
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  # Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet gateway
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - InternetGateway
      - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATEIP:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Nat elastic Ip
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  NatGateway:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Nat gateway
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  # Route table
  CustomRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Custom route table
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - CustomRouteTable
      - InternetGateway
    Properties:
      RouteTableId: !Ref CustomRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet1
      - CustomRouteTable
      - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref CustomRouteTable

  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet2
      - CustomRouteTable
      - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref CustomRouteTable

  PublicSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicSubnet3
      - CustomRouteTable
      - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref CustomRouteTable

  MainRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Main route table
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  NatGatewayRoute:
    DependsOn:
      - MainRouteTable
      - InternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AppPrivateSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - AppPrivateSubnet1
      - MainRouteTable
    Properties:
      SubnetId: !Ref AppPrivateSubnet1
      RouteTableId: !Ref MainRouteTable

  AppPrivateSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - AppPrivateSubnet2
      - MainRouteTable
    Properties:
      SubnetId: !Ref AppPrivateSubnet2
      RouteTableId: !Ref MainRouteTable

  AppPrivateSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - AppPrivateSubnet3
      - MainRouteTable
    Properties:
      SubnetId: !Ref AppPrivateSubnet3
      RouteTableId: !Ref MainRouteTable

  # Endpoints
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - VPC
      - MainRouteTable
      - CustomRouteTable
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Join
        - "."
        - - com.amazonaws
          - !Ref AWS::Region
          - s3
      PolicyDocument:
        Statement:
          - Action: "*"
            Effect: Allow
            Resource: "*"
            Principal: "*"
      RouteTableIds:
        - !Ref MainRouteTable
        - !Ref CustomRouteTable

  # Network ACL
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public nacl
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  # - Rules
  InPublicAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !GetAtt [VPC, CidrBlock]
      PortRange:
        From: 0
        To: 65535

  InPublicAclAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 105
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref RemoteCidrSSHAccess
      PortRange:
        From: 22
        To: 22

  InPublicAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  InPublicAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 205
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  # - Public Subnet Association
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - PublicSubnet1
      - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - PublicSubnet2
      - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - PublicSubnet3
      - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref PublicNetworkAcl

  # - Private Network ACL
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private nacl
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  # - Rules
  InEphemeralPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutPrivateNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 105
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  # Private Subnet Associations
  AppPrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - AppPrivateSubnet1
      - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref AppPrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  AppPrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - AppPrivateSubnet2
      - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref AppPrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  AppPrivateSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - AppPrivateSubnet3
      - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref AppPrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl

  DBPrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - DBPrivateSubnet1
      - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref DBPrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  DBPrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - DBPrivateSubnet2
      - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref DBPrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  DBPrivateSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - DBPrivateSubnet3
      - PrivateNetworkAcl
    Properties:
      SubnetId: !Ref DBPrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl

  # Security Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable HTTP/HTTPS access to the VPC instances in public subnet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: Web security group
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH Access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref RemoteCidrSSHAccess
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: Bastion security group
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable communication between bastion host with app subnets instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref BastionSecurityGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: Appication security group
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
        - Key: Staging
          Value: !Ref Staging

Outputs:
  Owner:
    Description: Team or Individual that owns this template.
    Value: !Ref Owner
  Project:
    Description: The project name
    Value: !Ref Project
  VPC:
    Description: VPC id
    Value: !Ref VPC
  S3VPCEpt:
    Description: VPC endpoint for S3
    Value: !Ref S3VpcEndpoint
  PublicSubnet1:
    Description: Public Subnet 1 Created for VPC
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2 Created for VPC
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet 3 Created for VPC
    Value: !Ref PublicSubnet3
  AppPrivateSubnet1:
    Description: Private subnet for the application in az-1
    Value: !Ref AppPrivateSubnet1
  AppPrivateSubnet2:
    Description: Private subnet for the application in az-2
    Value: !Ref AppPrivateSubnet2
  AppPrivateSubnet3:
    Description: Private subnet for the application in az-3
    Value: !Ref AppPrivateSubnet3
  DBPrivateSubnet1:
    Description: Private subnet for the database in az-1
    Value: !Ref DBPrivateSubnet1
  DBPrivateSubnet2:
    Description: Private subnet for the database in az-2
    Value: !Ref DBPrivateSubnet2
  DBPrivateSubnet3:
    Description: Private subnet for the database in az-3
    Value: !Ref DBPrivateSubnet3
  WebSecurityGroup:
    Description: Web security group
    Value: !Ref WebSecurityGroup
  BastionSecurityGroup:
    Description: Bastion security group
    Value: !Ref BastionSecurityGroup
